这套代码主要是想解决游戏数据的以下问题
1.希望游戏内有一个统一的接口来查询分布在不同实例上的数据
2.希望保存游戏时有一个统一的接口来提交需要保存的数据
3.希望对数据读写修改不用顾忌修改未保存导致读取到修改前的数据，即对数据操作的原子化

以上需求由以下原因产生：
1.大模块间的数据交换，比如UI界面读取角色库存绘制场景，导演系统读取角色属性判断剧情路线
虽然大模块几乎都有一个单例的管理者，可以手动的设置它们互相之间的引用，但这样会让代码冗长，引用单例再访问到具体数据很麻烦，且提高了其耦合度，由此产生了第一点需求

2.目前的存档系统设计的缺陷
它需要数据使用者一直存活，因为需要其在存档管理者发布存取事件时，立刻进行数据的序列化或反序列化，否则会丢失数据
这是第二点需求的由来，我需要一个容器来容纳需要保存的数据，这个接口可以让数据的保存与实例的存活不再强绑定

2.想要减少游戏对本地文件直接操作的次数，之前使用的存档插件，可以满足需求的第一点，第三点则难以满足
想读取已被修改过的数据的话，需要调用其Writer进行保存操作，再重新创建一个reader，然后再使用这个reader进行读取，过程中产生了不必须的对本地文件的操作，我对此不满

它的缺陷：
1.无法访问与修改尚未被DataUser注册的数据
因为它只是一个帮助DataUser进行数据的读取与保存，并帮助其他实例寻找DataUser的数据中介，具体的查询与修改操作是放在DataUser那里由它们自定义的

2.只能通过已知的名称才能方便的查找DataUser
我并不打算给查询DataUser加个列表循环访问，我希望存放在DataManager的数据都是需要与本地文件进行交互，或者需要在全局环境被不可预测的未知来源进行访问的
所以我希望注册在DataManager里的数据包不应该经常的生成与销毁
如果是敌人列表，物品清单这种可能面临高频销毁与创建的数据，请自己实现一个DataUser接口来集中管理它们，将它们打包成一个数据包，并通过这个接口来将数据传递给外部，而不是直接分别给ABCD甲乙丙丁挂上个DataUser扔进DataManager里



于是有了以下设计
1.DataManager，它是一个单例，负责提供上述需求中那个统一的接口，它将是DataUser与本地文件，以及DataUser之间的数据中介
2.DataPack，保存数据本体的实例，带了名称，是否需要统一存取等等属性来标注数据性质，使用者不需要与其交互
3.DataUser，数据的使用者，更新者，控制者，初始化时需要执行DataManager的注册方法来从那里获取数据
